package com.theiasec.helios.core.modulesimport com.theiasec.helios.core.communication.Packet;import com.theiasec.helios.core.managers.CommunicationManager;

abstract class Module {	CommunicationManager communicationManager	boolean isInitialized = false	boolean deviceIdSet = false	boolean printed = false	String deviceId = "0000"	String deviceType = "0000"	String lastStatus = "0000"	String currentStatus = "0000"	Socket location	Date lastPacket	ModuleType moduleType		/**	 *  Every module has to be one of these types	 *	 * Sensors 	 * <- Are suppressed by Authentication in the same zone	 * -> Set off action if the authentication hasn't happened	 */	enum ModuleType {		AUTHENTICATION, ACTION, SENSOR	}		String BLANK_DATA = "000000000000000000000"		//Maps device id's to their actual Java class	static deviceTypeMap = [		"0000" : TestModule.class,		"000A" : DoorIsOpenModule.class,		"0010" : BuzzerModule.class,		"0011" : UsbKeyModule.class		]		public static Module createNewModule(Packet packet) {		Module newModule = this.deviceTypeMap[packet.deviceType].newInstance()		newModule.location = packet.source		return newModule	}		//This is passed a packet and confirms whether or not it id s valid packet for this module	abstract Packet filterPacket(Packet packet)		//This should start a module and pass various information to the communication manager	abstract void initialize(String deviceId) 		//This only needs to be implemented by Action type modules, and will be called internally by Helios when an alert is fired	abstract void performAction()
}
